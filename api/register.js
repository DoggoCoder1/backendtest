import { Pool } from 'pg';
import { clean } from 'profanity-cleaner';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

export default async function handler(req, res) {
  let client;
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed. Only POST requests are supported for registration.' });
  }

  try {
    client = await pool.connect();
    const username = req.body.username ? req.body.username.trim() : '';
    const password = req.body.password;
    
    // Basic validation
    if (!username || !password) {
      return res.status(400).json({ error: 'Username and password are required.' });
    }
    if (clean(username).includes("*")) {
      return res.status(400).json({ error: 'Username was filtered.' });
    }
    // Call the newly implemented checkUsername function
    //if (checkUsername(username)) { // ðŸ’¡ Corrected the check to use the function
    //  return res.status(400).json({ error: 'Failed to sign up: Username contains forbidden words.' });
    //}
    
    // Optional: Add length checks for username/password here
    // Example: if (username.length < 3 || username.length > 20) { ... }

    try {
      // Note: Storing a plain password is a MAJOR security risk. 
      // This should be storing a PASSWORD HASH (e.g., generated by bcrypt).
      await client.query('INSERT INTO users (username, password_hash) VALUES ($1, $2)', [username, password]);

      return res.status(201).json({ message: `User registered successfully.` });
    } catch (dbError) {
      if (dbError.code === '23505') {
        // PostgreSQL unique_violation error code
        return res.status(409).json({ error: 'Username already exists. Please choose a different username.' });
      }
      throw dbError; // Re-throw other database errors
    }

  } catch (err) {
    console.error('Server error during registration:', err);
    res.status(500).json({ error: 'Internal server error during registration.' });
  } finally {
    if (client) {
      client.release();
    }
  }
}